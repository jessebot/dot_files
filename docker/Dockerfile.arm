# onbaordme Debian Bookworm image - linux/amd64 only
FROM debian:bookworm-slim

# ""        - will install onboardme, but won't run onboardme
# "default" - installs onboardme, and runs: onboardme --no_upgrade --overwrite
ARG RUN_MODE=""
ARG XDG="True"

# this makes debian not prompt for stuff
ENV DEBIAN_FRONTEND=noninteractive

# install pre-req apt packages. The weird ones are for compiling stuff
# python3 defaults to python 3.11 in Debian Bookworm
RUN apt-get update && \
    apt list --upgradeable | grep security | cut -f1 -d '/' | xargs apt-get install --no-install-recommends -y && \
    apt-get install -y --no-install-recommends \
    build-essential \
    file \
    curl \
    git \
    python3-pip \
    python3-dev \
    openssh-client \
    sudo \
    wget \
    unzip \
    cmake \
    ninja-build \
    gettext

# create default user
RUN useradd -m friend && \
    usermod -aG sudo friend && \
    echo 'friend ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

WORKDIR /home/friend
USER friend

ENV HOME="/home/friend"

# make sure we can run locally installed executables
ENV PATH="$HOME/.local/bin:$PATH"

# for standardizing where configs/state are installed
ENV XDG_CONFIG_HOME="$HOME/.config"
ENV XDG_CACHE_HOME="$HOME/.cache"
ENV XDG_DATA_HOME="$HOME/.local/share"
ENV XDG_STATE_HOME="$HOME/.local/state"

# make python use our cache if the user wants to use XDG pathing
RUN if [ "$XDG" == "True" ]; then export PYTHONPYCACHEPREFIX=$XDG_CACHE_HOME/python; fi
# this isn't working via onboardme for some reason :(
# RUN if [ "$XDG" == "True" ]; then export PYTHONUSERBASE=$XDG_DATA_HOME/python; fi

# install onboardme - using python 3.11, default for Debian bookworm
RUN pip install --user onboardme --break-system-packages && onboardme --version

# compile neovim from source
# https://github.com/neovim/neovim/wiki/Building-Neovim#build-prerequisites
RUN git clone https://github.com/neovim/neovim /tmp/neovim && \
    cd /tmp/neovim/ && \
    git checkout stable && \
    make CMAKE_BUILD_TYPE=RelWithDebInfo && \
    cd build && cpack -G DEB && sudo dpkg -i nvim-linux64.deb

# compile fastfetch, for system facts, from source
# https://github.com/LinusDierheimer/fastfetch#building
RUN git clone https://github.com/LinusDierheimer/fastfetch.git $HOME/.local/bin/fastfetch && \
    cd $HOME/.local/bin/fastfetch/ && \
    mkdir -p build && \
    cd build && \
    cmake .. && \
    cmake --build . --target fastfetch --target flashfetch

# download bottom, a top replacement
RUN curl -LO https://github.com/ClementTsang/bottom/releases/download/0.9.1/bottom_0.9.1_arm64.deb && \
    sudo dpkg -i bottom_0.9.1_arm64.deb

# download gitui, a tui for git stuff
RUN curl -LO https://github.com/extrawurst/gitui/releases/download/v0.22.1/gitui-linux-aarch64.tar.gz && \
    tar xvf gitui-linux-aarch64.tar.gz && \
    mv gitui $HOME/.local/bin/gitui

# download zellij, a tmux replacement
RUN curl -LO https://github.com/zellij-org/zellij/releases/download/v0.36.0/zellij-aarch64-unknown-linux-musl.tar.gz && \
    tar xvf zellij-aarch64-unknown-linux-musl.tar.gz && \
    mv zellij $HOME/.local/bin/zellij

# this is for a cute fastfetch
COPY --chown=friend:friend docker_space_chalk /tmp/ff_config

# actual running of onboardme
RUN if [ ! -z $RUN_MODE ]; then onboardme --overwrite --no_upgrade --git_branch docker-arm64-only --steps dot_files; fi

RUN if [ ! -z $RUN_MODE ]; then onboardme --overwrite --no_upgrade --log_level debug --git_branch docker-arm64-only && mv /tmp/ff_config ${XDG_CONFIG_HOME}/fastfetch/config.conf; fi

RUN sudo apt-get clean && \
    sudo pip cache purge && \
    sudo rm -rf /var/lib/apt/lists/* && \
    sudo rm -rf /tmp/*

ENTRYPOINT ["/bin/bash"]
